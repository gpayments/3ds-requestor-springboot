package com.gpayments.requestor.dto.activeserver;

/*
 * GPayments 3DS Server API Reference
 * Welcome to the 3DS Server RESTful API. You can use our API to access 3DS Server functionalities.  The 3DS Server API is organised around REST. Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, such as HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We support cross-origin resource sharing, allowing you to interact securely with our API from a client-side web application (though you should never expose your secret API key in any public website’s client-side code). JSON is returned by all API responses, including errors.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: techsupport@gpayments.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Merchant’s assessment of the level of fraud risk for the specific authentication for both the cardholder and the authentication being conducted.
 */
public class MerchantRiskIndicator {
    @JsonProperty("deliveryEmailAddress")
    private String deliveryEmailAddress = null;

    /**
     * Indicates the merchandise delivery timeframe. Values accepted: [01-04]
     */
    @JsonProperty("deliveryTimeframe")
    private String deliveryTimeframe = null;

    @JsonProperty("giftCardAmount")
    private String giftCardAmount = null;

    @JsonProperty("giftCardCount")
    private String giftCardCount = null;

    @JsonProperty("giftCardCurr")
    private String giftCardCurr = null;

    @JsonProperty("preOrderDate")
    private String preOrderDate = null;

    /**
     * Indicates whether Cardholder is placing an order for merchandise with a future availability or release date. Values accepted: [01,02]
     */
    @JsonProperty("preOrderPurchaseInd")
    private String preOrderPurchaseInd = null;

    /**
     * Indicates whether the cardholder is reordering previously purchased merchandise. Values accepted: [01,02]
     */
    @JsonProperty("reorderItemsInd")
    private String reorderItemsInd = null;

    /**
     * Indicates shipping method chosen for the transaction. Merchants must choose the Shipping Indicator code that most reasonably and fairly describes the cardholder&#39;s specific transaction, not their general business. If one or more items are included in the sale, use the Shipping Indicator code for the physical goods, or if all digital goods, use the Shipping Indicator code that describes the most expensive item. Values accepted: [01-07]
     */
    @JsonProperty("shipIndicator")
    private String shipIndicator = null;


    /**
     * For Electronic delivery, the email address to which the merchandise was delivered. Length: maximum 254 characters
     *
     * @return deliveryEmailAddress
     **/
    public String getDeliveryEmailAddress() {
        return deliveryEmailAddress;
    }

    public void setDeliveryEmailAddress(String deliveryEmailAddress) {
        this.deliveryEmailAddress = deliveryEmailAddress;
    }


    /**
     * Indicates the merchandise delivery timeframe. Values accepted: [01-04]
     *
     * @return deliveryTimeframe
     **/
    public String getDeliveryTimeframe() {
        return deliveryTimeframe;
    }

    public void setDeliveryTimeframe(String deliveryTimeframe) {
        this.deliveryTimeframe = deliveryTimeframe;
    }

    public MerchantRiskIndicator giftCardAmount(String giftCardAmount) {
        this.giftCardAmount = giftCardAmount;
        return this;
    }

    /**
     * For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s) in major units (for example, USD 123.45 is 123). Length: maximum 15 characters
     *
     * @return giftCardAmount
     **/
    public String getGiftCardAmount() {
        return giftCardAmount;
    }

    public void setGiftCardAmount(String giftCardAmount) {
        this.giftCardAmount = giftCardAmount;
    }

    public MerchantRiskIndicator giftCardCount(String giftCardCount) {
        this.giftCardCount = giftCardCount;
        return this;
    }

    /**
     * For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased. Length: 2 characters
     *
     * @return giftCardCount
     **/
    public String getGiftCardCount() {
        return giftCardCount;
    }

    public void setGiftCardCount(String giftCardCount) {
        this.giftCardCount = giftCardCount;
    }

    public MerchantRiskIndicator giftCardCurr(String giftCardCurr) {
        this.giftCardCurr = giftCardCurr;
        return this;
    }

    /**
     * For prepaid or gift card purchase, the currency code of the card as defined in ISO 4217 other than those listed in Table A.6. Length: 3 characters
     *
     * @return giftCardCurr
     **/
    public String getGiftCardCurr() {
        return giftCardCurr;
    }

    public void setGiftCardCurr(String giftCardCurr) {
        this.giftCardCurr = giftCardCurr;
    }

    public MerchantRiskIndicator preOrderDate(String preOrderDate) {
        this.preOrderDate = preOrderDate;
        return this;
    }

    /**
     * For a pre-ordered purchase, the expected date that the merchandise will be available. Format accepted: YYYYMMDD
     *
     * @return preOrderDate
     **/
    public String getPreOrderDate() {
        return preOrderDate;
    }

    public void setPreOrderDate(String preOrderDate) {
        this.preOrderDate = preOrderDate;
    }


    /**
     * Indicates whether Cardholder is placing an order for merchandise with a future availability or release date. Values accepted: [01,02]
     *
     * @return preOrderPurchaseInd
     **/
    public String getPreOrderPurchaseInd() {
        return preOrderPurchaseInd;
    }

    public void setPreOrderPurchaseInd(String preOrderPurchaseInd) {
        this.preOrderPurchaseInd = preOrderPurchaseInd;
    }

    /**
     * Indicates whether the cardholder is reordering previously purchased merchandise. Values accepted: [01,02]
     *
     * @return reorderItemsInd
     **/
    public String getReorderItemsInd() {
        return reorderItemsInd;
    }

    public void setReorderItemsInd(String reorderItemsInd) {
        this.reorderItemsInd = reorderItemsInd;
    }

    /**
     * Indicates shipping method chosen for the transaction. Merchants must choose the Shipping Indicator code that most reasonably and fairly describes the cardholder&#39;s specific transaction, not their general business. If one or more items are included in the sale, use the Shipping Indicator code for the physical goods, or if all digital goods, use the Shipping Indicator code that describes the most expensive item. Values accepted: [01-07]
     *
     * @return shipIndicator
     **/
    public String getShipIndicator() {
        return shipIndicator;
    }

    public void setShipIndicator(String shipIndicator) {
        this.shipIndicator = shipIndicator;
    }


    @Override
    public String toString() {
        return "{\n" +
                "\t\t\"deliveryEmailAddress\":\"" + deliveryEmailAddress +"\",\n" +
                "\t\t\"deliveryTimeframe\":\"" + deliveryTimeframe +"\",\n" +
                "\t\t\"giftCardAmount\":\"" + giftCardAmount +"\",\n" +
                "\t\t\"giftCardCount\":\"" + giftCardCount +"\",\n" +
                "\t\t\"giftCardCurr\":\"" + giftCardCurr +"\",\n" +
                "\t\t\"preOrderDate\":\"" + preOrderDate +"\",\n" +
                "\t\t\"preOrderPurchaseInd\":\"" + preOrderPurchaseInd +"\",\n" +
                "\t\t\"reorderItemsInd\":\"" + reorderItemsInd +"\",\n" +
                "\t\t\"shipIndicator\":\"" + shipIndicator +"\"\n" +
                "\t},\n";
    }
}

